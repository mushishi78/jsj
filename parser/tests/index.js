/* Automatically generated by index-generate.js */
var TESTS = [
  {
    "name": "assignment",
    "input": "# Variable assignment\r\na = 0;\r\nb =~ a;\r\nc =~ a b;\r\na ~= b;\r\na b ~= c;\r\nd e f ~= a();\r\n\r\n# Property assignment\r\nA = {\r\n  p: 0;\r\n  q:~ p;\r\n  r:~ p q;\r\n  a ~:b;\r\n  a b ~:c;\r\n  h j k ~: a();\r\n};\r\n",
    "output": "(function() {\n    var a = 0;\n    var b = {\n        a: a\n    };\n    var c = {\n        a: a,\n        b: b\n    };\n    a = b.a;\n    a = c.a;\n    b = c.b;\n    var _obj1 = a();\n    var d = _obj1.d;\n    var e = _obj1.e;\n    var f = _obj1.f;\n    var A = (function() {\n        var p = 0;\n        var q = {\n            p: p\n        };\n        var r = {\n            p: p,\n            q: q\n        };\n        a = b.a;\n        a = c.a;\n        b = c.b;\n        var _obj2 = a();\n        var h = _obj2.h;\n        var j = _obj2.j;\n        var k = _obj2.k;\n        return {\n            p: p,\n            q: q,\n            r: r,\n            a: a,\n            b: b,\n            h: h,\n            j: j,\n            k: k\n        };\n    })();\n})();"
  },
  {
    "name": "binding",
    "input": "# Left associativity\r\na = 0 && 0 || 0;\r\nb = 0 || 0 && 0;\r\nc = 0 == 0 != 0 < 0 > 0 <= 0 >= 0;\r\nd = 0 >= 0 <= 0 > 0 < 0 != 0 == 0;\r\ne = 0 + 0 - 0;\r\nf = 0 - 0 + 0;\r\ng = 0 * 0 / 0 % 0;\r\nh = 0 % 0 / 0 * 0;\r\ni = a.b[0]();\r\nj = a()[0].b;\r\n\r\n# Binding power\r\nk = 0 && 0 == 0;\r\nl = 0 == 0 + 0;\r\nm = 0 + 0 * 0;\r\nn = 0 * 0..0;\r\no = !a * 0;\r\np = !a.b;\r\n\r\n# Grouping\r\nq = (0 && 0) == 0;\r\nr = (0 == 0) + 0;\r\ns = (0 + 0) * 0;\r\nt = !(a * 0);\r\nu = (!a).b;\r\n",
    "output": "(function() {\n    var a = JSJ.Core.or(JSJ.Core.and(0, function() {\n        return 0;\n    }), function() {\n        return 0;\n    });\n    var b = JSJ.Core.and(JSJ.Core.or(0, function() {\n        return 0;\n    }), function() {\n        return 0;\n    });\n    var c = ((((((0 === 0) !== 0) < 0) > 0) <= 0) >= 0);\n    var d = ((((((0 >= 0) <= 0) > 0) < 0) !== 0) === 0);\n    var e = ((0 + 0) - 0);\n    var f = ((0 - 0) + 0);\n    var g = (((0 * 0) / 0) % 0);\n    var h = (((0 % 0) / 0) * 0);\n    var i = a.b[0]();\n    var j = a()[0].b;\n    var k = JSJ.Core.and(0, function() {\n        return (0 === 0);\n    });\n    var l = (0 === (0 + 0));\n    var m = (0 + (0 * 0));\n    var n = (0 * JSJ.Core.range(0, 0));\n    var o = (!JSL.Core.truthy(a) * 0);\n    var p = !JSL.Core.truthy(a.b);\n    var q = (JSJ.Core.and(0, function() {\n        return 0;\n    }) === 0);\n    var r = ((0 === 0) + 0);\n    var s = ((0 + 0) * 0);\n    var t = !JSL.Core.truthy((a * 0));\n    var u = !JSL.Core.truthy(a).b;\n})();"
  },
  {
    "name": "for",
    "input": "for (a in [0, 1, 2]) {\r\n  res = res + a;\r\n}\r\n\r\nfor (i in 0..2) {\r\n  res = res + i;\r\n}\r\n\r\nfor (key value in {}) {\r\n  res = [key, value];\r\n}\r\n",
    "output": "(function() {\n    var _collection1 = [0, 1, 2];\n    for (var _index1 = 0; _index1 < _collection1.length; _index1++) {\n        var a = _collection1[_index1];\n        var res = (res + a);\n    }\n    var _collection2 = JSJ.Core.range(0, 2);\n    for (var _index2 = 0; _index2 < _collection2.length; _index2++) {\n        var i = _collection2[_index2];\n        var res = (res + i);\n    }\n    var _collection3 = {};\n    for (var key in _collection3) {\n        if (!_collection3.hasOwnProperty(key)) continue;\n        var value = _collection3[key];\n        var res = [key, value];\n    }\n})();"
  },
  {
    "name": "functions1",
    "input": "A = fn() {\r\n  return 5;\r\n};\r\n\r\nC = fn(a b) {\r\n  if (a > b) {\r\n    p: 5;\r\n  }\r\n\r\n  else {\r\n    q: 6;\r\n  }\r\n};\r\n",
    "output": "(function() {\n    var A = function() {\n        return 5;\n    };\n    var C = function(a, b) {\n        if (JSJ.Core.truthy((a > b))) {\n            var p = 5;\n        } else {\n            var q = 6;\n        }\n        return {\n            p: p,\n            q: q\n        };\n    };\n})();"
  },
  {
    "name": "functions2",
    "input": "A = fn(a b) {\r\n  if (a > b) {\r\n    p: 5;\r\n  }\r\n\r\n  return 5;\r\n};\r\n",
    "output": "{\n  \"error\": \"props-and-return\"\n}"
  },
  {
    "name": "if",
    "input": "a = true;\r\nb = true;\r\nc = true;\r\n\r\nif (a) {\r\n  res = 0;\r\n}\r\n\r\nif (a) {\r\n  res = 0;\r\n} else {\r\n  res = 0;\r\n}\r\n\r\nif (a) {\r\n  res = 0;\r\n} else if (b) {\r\n  res = 0;\r\n}\r\n\r\nif (a) {\r\n  res = 0;\r\n} else if (b) {\r\n  res = 0;\r\n} else if (c) {\r\n  res = 0;\r\n}\r\n\r\nif (a) {\r\n  res = 0;\r\n} else if (b) {\r\n  res = 0;\r\n} else {\r\n  res = 0;\r\n}\r\n\r\nif (a) {\r\n  res = 0;\r\n} else if (b) {\r\n  res = 0;\r\n} else if (c) {\r\n  res = 0;\r\n} else {\r\n  res = 0;\r\n}\r\n",
    "output": "(function() {\n    var a = true;\n    var b = true;\n    var c = true;\n    if (JSJ.Core.truthy(a)) {\n        var res = 0;\n    }\n    if (JSJ.Core.truthy(a)) {\n        var res = 0;\n    } else {\n        var res = 0;\n    }\n    if (JSJ.Core.truthy(a)) {\n        var res = 0;\n    } else if (JSJ.Core.truthy(b)) {\n        var res = 0;\n    }\n    if (JSJ.Core.truthy(a)) {\n        var res = 0;\n    } else if (JSJ.Core.truthy(b)) {\n        var res = 0;\n    } else if (JSJ.Core.truthy(c)) {\n        var res = 0;\n    }\n    if (JSJ.Core.truthy(a)) {\n        var res = 0;\n    } else if (JSJ.Core.truthy(b)) {\n        var res = 0;\n    } else {\n        var res = 0;\n    }\n    if (JSJ.Core.truthy(a)) {\n        var res = 0;\n    } else if (JSJ.Core.truthy(b)) {\n        var res = 0;\n    } else if (JSJ.Core.truthy(c)) {\n        var res = 0;\n    } else {\n        var res = 0;\n    }\n})();"
  },
  {
    "name": "leds",
    "input": "a = 0 && 0;\r\nb = 0 || 0;\r\nc = 0 == 0;\r\nd = 0 != 0;\r\ne = 0 < 0;\r\nf = 0 > 0;\r\ng = 0 <= 0;\r\nh = 0 >= 0;\r\ni = 0 + 0;\r\nj = 0 - 0;\r\nk = 0 * 0;\r\nl = 0 / 0;\r\nm = 0 % 0;\r\nn = 0..0;\r\no = 0.1;\r\np = a.b;\r\nq = a[0];\r\nr = a();\r\n",
    "output": "(function() {\n    var a = JSJ.Core.and(0, function() {\n        return 0;\n    });\n    var b = JSJ.Core.or(0, function() {\n        return 0;\n    });\n    var c = (0 === 0);\n    var d = (0 !== 0);\n    var e = (0 < 0);\n    var f = (0 > 0);\n    var g = (0 <= 0);\n    var h = (0 >= 0);\n    var i = (0 + 0);\n    var j = (0 - 0);\n    var k = (0 * 0);\n    var l = (0 / 0);\n    var m = (0 % 0);\n    var n = JSJ.Core.range(0, 0);\n    var o = 0.1;\n    var p = a.b;\n    var q = a[0];\n    var r = a();\n})();"
  },
  {
    "name": "loop",
    "input": "a = 0;\r\n\r\nloop {\r\n  a = a + 1;\r\n  if (a > 10) {\r\n    break;\r\n  }\r\n  b = a * 5;\r\n}\r\n",
    "output": "(function() {\n    var a = 0;\n    while (true) {\n        a = (a + 1);\n        if (JSJ.Core.truthy((a > 10))) {\n            break;\n        }\n        var b = (a * 5);\n    }\n})();"
  },
  {
    "name": "namespace1",
    "input": "namespace Foo\r\n\r\nBar: 5;\r\n",
    "output": "var Foo = Foo || {};\n(function() {\n    var Bar = 5;\n    Foo.Bar = Bar;\n})();"
  },
  {
    "name": "namespace2",
    "input": "namespace Foo.Bar.Quiz\r\n\r\nDuck: 0;\r\nCow: 1;\r\nChicken: 2;\r\n",
    "output": "var Foo = Foo || {};\nvar Foo.Bar = Foo.Bar || {};\nvar Foo.Bar.Quiz = Foo.Bar.Quiz || {};\n(function() {\n    var Duck = 0;\n    var Cow = 1;\n    var Chicken = 2;\n    Foo.Bar.Quiz.Duck = Duck;\n    Foo.Bar.Quiz.Cow = Cow;\n    Foo.Bar.Quiz.Chicken = Chicken;\n})();"
  },
  {
    "name": "nuds",
    "input": "a = 0;\r\nb = '0';\r\nc = true;\r\nd = false;\r\ne = undef;\r\nf = !0;\r\ng = fn() {};\r\nh = (0);\r\ni = {};\r\nj = [];\r\nk = a;\r\n",
    "output": "(function() {\n    var a = 0;\n    var b = \"0\";\n    var c = true;\n    var d = false;\n    var e = undefined;\n    var f = !JSL.Core.truthy(0);\n    var g = function() {};\n    var h = 0;\n    var i = {};\n    var j = [];\n    var k = a;\n})();"
  },
  {
    "name": "scope1",
    "input": "a = 5;\r\na = 10;\r\n\r\n{\r\n  b = 10;\r\n  b = 9;\r\n}\r\n\r\nb = 25;\r\n",
    "output": "(function() {\n    var a = 5;\n    a = 10;\n    (function() {\n        var b = 10;\n        b = 9;\n    })();\n    var b = 25;\n})();"
  },
  {
    "name": "scope2",
    "input": "a = b;\r\n",
    "output": "{\n  \"error\": \"unknown-variable\",\n  \"variable\": \"b\"\n}"
  },
  {
    "name": "scope3",
    "input": "{\r\n  b = 50;\r\n}\r\n\r\na = b;\r\n",
    "output": "{\n  \"error\": \"unknown-variable\",\n  \"variable\": \"b\"\n}"
  },
  {
    "name": "scope4",
    "input": "if (true) {\r\n  b = 50;\r\n}\r\n\r\na = b;\r\n",
    "output": "{\n  \"error\": \"unknown-variable\",\n  \"variable\": \"b\"\n}"
  },
  {
    "name": "scope5",
    "input": "for (i in 0..10) {\r\n  b = 50;\r\n}\r\n\r\na = i;\r\n",
    "output": "{\n  \"error\": \"unknown-variable\",\n  \"variable\": \"i\"\n}"
  },
  {
    "name": "scope6",
    "input": "loop {\r\n  b = 50;\r\n}\r\n\r\na = b;\r\n",
    "output": "{\n  \"error\": \"unknown-variable\",\n  \"variable\": \"b\"\n}"
  },
  {
    "name": "scope7",
    "input": "b = 50;\r\n\r\n{\r\n  a = b;\r\n}\r\n",
    "output": "(function() {\n    var b = 50;\n    (function() {\n        var a = b;\n    })();\n})();"
  },
  {
    "name": "statements",
    "input": "using {\r\n  console.log\r\n}\r\n\r\ncontinue;\r\nbreak;\r\nreturn 10 * 3;\r\nreturn;\r\ndo log('This is how you do things');\r\n",
    "output": "(function() {\n    var log = console.log;\n    continue;\n    break;\n    return (10 * 3);\n    return;\n    log(\"This is how you do things\");\n})();"
  },
  {
    "name": "string",
    "input": "a = 'This is a string!';\r\nb = '\r\n  This is a multiple line string.\r\n\r\n  It is useful.\r\n';\r\nc = 'This is an interpolation: {b}';\r\nd = 'Multiple interpolations: {a}, {b}, {c}';\r\ne = 'Escapes: \\'\\{\\}\\\\\"\t\f';",
    "output": "(function() {\n    var a = \"This is a string!\";\n    var b = \"\\r\\n  This is a multiple line string.\\r\\n\\r\\n  It is useful.\\r\\n\";\n    var c = \"This is an interpolation: \" + b + \"\";\n    var d = \"Multiple interpolations: \" + a + \", \" + b + \", \" + c + \"\";\n    var e = \"Escapes: '{}\\\\\\\"\\t\\f\";\n})();"
  },
  {
    "name": "using1",
    "input": "using {\r\n  Foo.Bar.Quiz\r\n}\r\n\r\na = Quiz.jump();\r\n",
    "output": "(function() {\n    var Quiz = Foo.Bar.Quiz;\n    var a = Quiz.jump();\n})();"
  },
  {
    "name": "using2",
    "input": "using {\r\n  Foo.Bar\r\n  Jazz\r\n  Harry.Operator\r\n}\r\n\r\na = Bar.jump();\r\nb = Jazz(Operator.Fixed);\r\n",
    "output": "(function() {\n    var Bar = Foo.Bar;\n    var Jazz = Jazz;\n    var Operator = Harry.Operator;\n    var a = Bar.jump();\n    var b = Jazz(Operator.Fixed);\n})();"
  }
]